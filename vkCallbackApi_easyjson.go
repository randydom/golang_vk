// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package vkCallbackApi

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi(in *jlexer.Lexer, out *WallRepost) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "postponed_id":
			out.PostponedId = int(in.Int())
		case "id":
			out.Id = int(in.Int())
		case "owner_id":
			out.OwnerId = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "access_key":
			out.AccessKey = string(in.String())
		case "created_by":
			out.CreatedBy = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_owner_id":
			out.ReplyOwnerId = int(in.Int())
		case "reply_post_id":
			out.ReplyPostId = int(in.Int())
		case "friends_only":
			out.FriendsOnly = int(in.Int())
		case "comments":
			easyjsonC2d7175aDecode(in, &out.Comments)
		case "likes":
			easyjsonC2d7175aDecode1(in, &out.Likes)
		case "reposts":
			easyjsonC2d7175aDecode2(in, &out.Reposts)
		case "views":
			easyjsonC2d7175aDecode3(in, &out.Views)
		case "post_type":
			out.PostType = string(in.String())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Attachment
					(v1).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "signer_id":
			out.SignerId = int(in.Int())
		case "copy_history":
			if in.IsNull() {
				in.Skip()
				out.CopyHistory = nil
			} else {
				in.Delim('[')
				if out.CopyHistory == nil {
					if !in.IsDelim(']') {
						out.CopyHistory = make([]Post, 0, 1)
					} else {
						out.CopyHistory = []Post{}
					}
				} else {
					out.CopyHistory = (out.CopyHistory)[:0]
				}
				for !in.IsDelim(']') {
					var v2 Post
					(v2).UnmarshalEasyJSON(in)
					out.CopyHistory = append(out.CopyHistory, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "can_pin":
			out.CanPin = int(in.Int())
		case "can_delete":
			out.CanDelete = int(in.Int())
		case "can_edit":
			out.CanEdit = int(in.Int())
		case "is_pinned":
			out.IsPinned = int(in.Int())
		case "marked_as_ads":
			out.MarkedAsAds = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi(out *jwriter.Writer, in WallRepost) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"postponed_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PostponedId))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OwnerId))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"access_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"created_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CreatedBy))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyOwnerId))
	}
	{
		const prefix string = ",\"reply_post_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyPostId))
	}
	{
		const prefix string = ",\"friends_only\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FriendsOnly))
	}
	{
		const prefix string = ",\"comments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode(out, in.Comments)
	}
	{
		const prefix string = ",\"likes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode1(out, in.Likes)
	}
	{
		const prefix string = ",\"reposts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode2(out, in.Reposts)
	}
	{
		const prefix string = ",\"views\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode3(out, in.Views)
	}
	{
		const prefix string = ",\"post_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PostType))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Attachments {
				if v3 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v4)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"signer_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SignerId))
	}
	{
		const prefix string = ",\"copy_history\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.CopyHistory == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.CopyHistory {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"can_pin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CanPin))
	}
	{
		const prefix string = ",\"can_delete\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CanDelete))
	}
	{
		const prefix string = ",\"can_edit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CanEdit))
	}
	{
		const prefix string = ",\"is_pinned\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.IsPinned))
	}
	{
		const prefix string = ",\"marked_as_ads\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MarkedAsAds))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WallRepost) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WallRepost) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WallRepost) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WallRepost) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi1(in *jlexer.Lexer, out *Attachment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "val":
			if m, ok := out.Val.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Val.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Val = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out *jwriter.Writer, in Attachment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"val\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Val.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Val.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Val))
		}
	}
	out.RawByte('}')
}
func easyjsonC2d7175aDecode3(in *jlexer.Lexer, out *struct{ Count int }) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncode3(out *jwriter.Writer, in struct{ Count int }) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Count))
	}
	out.RawByte('}')
}
func easyjsonC2d7175aDecode2(in *jlexer.Lexer, out *struct {
	Count        int
	UserReposted int
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "user_reposted":
			out.UserReposted = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncode2(out *jwriter.Writer, in struct {
	Count        int
	UserReposted int
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"user_reposted\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UserReposted))
	}
	out.RawByte('}')
}
func easyjsonC2d7175aDecode1(in *jlexer.Lexer, out *struct {
	Count      int
	UserLikes  int
	CanLike    int
	CanPublish int
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "user_likes":
			out.UserLikes = int(in.Int())
		case "can_like":
			out.CanLike = int(in.Int())
		case "can_publish":
			out.CanPublish = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncode1(out *jwriter.Writer, in struct {
	Count      int
	UserLikes  int
	CanLike    int
	CanPublish int
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"user_likes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UserLikes))
	}
	{
		const prefix string = ",\"can_like\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CanLike))
	}
	{
		const prefix string = ",\"can_publish\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CanPublish))
	}
	out.RawByte('}')
}
func easyjsonC2d7175aDecode(in *jlexer.Lexer, out *struct {
	Count         int
	CanPost       int
	GroupsCanPost int
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "can_post":
			out.CanPost = int(in.Int())
		case "groups_can_post":
			out.GroupsCanPost = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncode(out *jwriter.Writer, in struct {
	Count         int
	CanPost       int
	GroupsCanPost int
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"can_post\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CanPost))
	}
	{
		const prefix string = ",\"groups_can_post\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.GroupsCanPost))
	}
	out.RawByte('}')
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi2(in *jlexer.Lexer, out *WallReplyRestore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "post_id":
			out.PostId = int(in.Int())
		case "post_owner_id":
			out.PostOwnerId = int(in.Int())
		case "id":
			out.Id = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v7 Attachment
					(v7).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi2(out *jwriter.Writer, in WallReplyRestore) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"post_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PostId))
	}
	{
		const prefix string = ",\"post_owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PostOwnerId))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Attachments {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v9)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WallReplyRestore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WallReplyRestore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WallReplyRestore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WallReplyRestore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi2(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi3(in *jlexer.Lexer, out *WallReplyNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "post_id":
			out.PostId = int(in.Int())
		case "post_owner_id":
			out.PostOwnerId = int(in.Int())
		case "id":
			out.Id = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v10 Attachment
					(v10).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi3(out *jwriter.Writer, in WallReplyNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"post_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PostId))
	}
	{
		const prefix string = ",\"post_owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PostOwnerId))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Attachments {
				if v11 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v12)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WallReplyNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WallReplyNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WallReplyNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WallReplyNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi3(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi4(in *jlexer.Lexer, out *WallReplyEdit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "post_id":
			out.PostId = int(in.Int())
		case "post_owner_id":
			out.PostOwnerId = int(in.Int())
		case "id":
			out.Id = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v13 Attachment
					(v13).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi4(out *jwriter.Writer, in WallReplyEdit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"post_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PostId))
	}
	{
		const prefix string = ",\"post_owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PostOwnerId))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Attachments {
				if v14 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v15)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WallReplyEdit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WallReplyEdit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WallReplyEdit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WallReplyEdit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi4(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi5(in *jlexer.Lexer, out *WallReplyDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "owner_id":
			out.OwnerId = int(in.Int())
		case "id":
			out.Id = int(in.Int())
		case "deleter_id":
			out.DeleterId = int(in.Int())
		case "post_id":
			out.PostId = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi5(out *jwriter.Writer, in WallReplyDelete) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OwnerId))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"deleter_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.DeleterId))
	}
	{
		const prefix string = ",\"post_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PostId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WallReplyDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WallReplyDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WallReplyDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WallReplyDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi5(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi6(in *jlexer.Lexer, out *WallReply) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "post_id":
			out.PostId = int(in.Int())
		case "owner_id":
			out.OwnerId = int(in.Int())
		case "id":
			out.Id = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v16 Attachment
					(v16).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi6(out *jwriter.Writer, in WallReply) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"post_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PostId))
	}
	{
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OwnerId))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Attachments {
				if v17 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v18)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WallReply) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WallReply) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WallReply) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WallReply) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi6(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi7(in *jlexer.Lexer, out *WallPostNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "postponed_id":
			out.PostponedId = int(in.Int())
		case "id":
			out.Id = int(in.Int())
		case "owner_id":
			out.OwnerId = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "access_key":
			out.AccessKey = string(in.String())
		case "created_by":
			out.CreatedBy = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_owner_id":
			out.ReplyOwnerId = int(in.Int())
		case "reply_post_id":
			out.ReplyPostId = int(in.Int())
		case "friends_only":
			out.FriendsOnly = int(in.Int())
		case "comments":
			easyjsonC2d7175aDecode(in, &out.Comments)
		case "likes":
			easyjsonC2d7175aDecode1(in, &out.Likes)
		case "reposts":
			easyjsonC2d7175aDecode2(in, &out.Reposts)
		case "views":
			easyjsonC2d7175aDecode3(in, &out.Views)
		case "post_type":
			out.PostType = string(in.String())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v19 Attachment
					(v19).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "signer_id":
			out.SignerId = int(in.Int())
		case "copy_history":
			if in.IsNull() {
				in.Skip()
				out.CopyHistory = nil
			} else {
				in.Delim('[')
				if out.CopyHistory == nil {
					if !in.IsDelim(']') {
						out.CopyHistory = make([]Post, 0, 1)
					} else {
						out.CopyHistory = []Post{}
					}
				} else {
					out.CopyHistory = (out.CopyHistory)[:0]
				}
				for !in.IsDelim(']') {
					var v20 Post
					(v20).UnmarshalEasyJSON(in)
					out.CopyHistory = append(out.CopyHistory, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "can_pin":
			out.CanPin = int(in.Int())
		case "can_delete":
			out.CanDelete = int(in.Int())
		case "can_edit":
			out.CanEdit = int(in.Int())
		case "is_pinned":
			out.IsPinned = int(in.Int())
		case "marked_as_ads":
			out.MarkedAsAds = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi7(out *jwriter.Writer, in WallPostNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"postponed_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PostponedId))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OwnerId))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"access_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"created_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CreatedBy))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyOwnerId))
	}
	{
		const prefix string = ",\"reply_post_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyPostId))
	}
	{
		const prefix string = ",\"friends_only\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FriendsOnly))
	}
	{
		const prefix string = ",\"comments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode(out, in.Comments)
	}
	{
		const prefix string = ",\"likes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode1(out, in.Likes)
	}
	{
		const prefix string = ",\"reposts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode2(out, in.Reposts)
	}
	{
		const prefix string = ",\"views\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode3(out, in.Views)
	}
	{
		const prefix string = ",\"post_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PostType))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.Attachments {
				if v21 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v22)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"signer_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SignerId))
	}
	{
		const prefix string = ",\"copy_history\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.CopyHistory == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.CopyHistory {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"can_pin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CanPin))
	}
	{
		const prefix string = ",\"can_delete\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CanDelete))
	}
	{
		const prefix string = ",\"can_edit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CanEdit))
	}
	{
		const prefix string = ",\"is_pinned\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.IsPinned))
	}
	{
		const prefix string = ",\"marked_as_ads\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MarkedAsAds))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WallPostNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WallPostNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WallPostNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WallPostNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi7(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi8(in *jlexer.Lexer, out *Wall) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "to_id":
			out.ToId = int(in.Int())
		case "id":
			out.Id = int(in.Int())
		case "owner_id":
			out.OwnerId = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "access_key":
			out.AccessKey = string(in.String())
		case "created_by":
			out.CreatedBy = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_owner_id":
			out.ReplyOwnerId = int(in.Int())
		case "reply_post_id":
			out.ReplyPostId = int(in.Int())
		case "friends_only":
			out.FriendsOnly = int(in.Int())
		case "comments":
			easyjsonC2d7175aDecode(in, &out.Comments)
		case "likes":
			easyjsonC2d7175aDecode1(in, &out.Likes)
		case "reposts":
			easyjsonC2d7175aDecode2(in, &out.Reposts)
		case "views":
			easyjsonC2d7175aDecode3(in, &out.Views)
		case "post_type":
			out.PostType = string(in.String())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v25 Attachment
					(v25).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "signer_id":
			out.SignerId = int(in.Int())
		case "copy_history":
			if in.IsNull() {
				in.Skip()
				out.CopyHistory = nil
			} else {
				in.Delim('[')
				if out.CopyHistory == nil {
					if !in.IsDelim(']') {
						out.CopyHistory = make([]Post, 0, 1)
					} else {
						out.CopyHistory = []Post{}
					}
				} else {
					out.CopyHistory = (out.CopyHistory)[:0]
				}
				for !in.IsDelim(']') {
					var v26 Post
					(v26).UnmarshalEasyJSON(in)
					out.CopyHistory = append(out.CopyHistory, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "can_pin":
			out.CanPin = int(in.Int())
		case "can_delete":
			out.CanDelete = int(in.Int())
		case "can_edit":
			out.CanEdit = int(in.Int())
		case "is_pinned":
			out.IsPinned = int(in.Int())
		case "marked_as_ads":
			out.MarkedAsAds = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi8(out *jwriter.Writer, in Wall) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"to_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ToId))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OwnerId))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"access_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"created_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CreatedBy))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyOwnerId))
	}
	{
		const prefix string = ",\"reply_post_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyPostId))
	}
	{
		const prefix string = ",\"friends_only\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FriendsOnly))
	}
	{
		const prefix string = ",\"comments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode(out, in.Comments)
	}
	{
		const prefix string = ",\"likes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode1(out, in.Likes)
	}
	{
		const prefix string = ",\"reposts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode2(out, in.Reposts)
	}
	{
		const prefix string = ",\"views\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode3(out, in.Views)
	}
	{
		const prefix string = ",\"post_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PostType))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.Attachments {
				if v27 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v28)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"signer_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SignerId))
	}
	{
		const prefix string = ",\"copy_history\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.CopyHistory == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.CopyHistory {
				if v29 > 0 {
					out.RawByte(',')
				}
				(v30).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"can_pin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CanPin))
	}
	{
		const prefix string = ",\"can_delete\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CanDelete))
	}
	{
		const prefix string = ",\"can_edit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CanEdit))
	}
	{
		const prefix string = ",\"is_pinned\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.IsPinned))
	}
	{
		const prefix string = ",\"marked_as_ads\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MarkedAsAds))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Wall) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Wall) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Wall) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Wall) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi8(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi9(in *jlexer.Lexer, out *VideoNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "owner_id":
			out.OwnerId = int(in.Int())
		case "access_key":
			out.AccessKey = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "duration":
			out.Duration = int(in.Int())
		case "photo130":
			out.Photo130 = string(in.String())
		case "photo320":
			out.Photo320 = string(in.String())
		case "photo640":
			out.Photo640 = string(in.String())
		case "photo800":
			out.Photo800 = string(in.String())
		case "first_frame130":
			out.FirstFrame130 = string(in.String())
		case "first_frame160":
			out.FirstFrame160 = string(in.String())
		case "first_frame320":
			out.FirstFrame320 = string(in.String())
		case "first_frame800":
			out.FirstFrame800 = string(in.String())
		case "files":
			(out.Files).UnmarshalEasyJSON(in)
		case "date":
			out.Date = int(in.Int())
		case "adding_date":
			out.AddingDate = int(in.Int())
		case "views":
			out.Views = int(in.Int())
		case "comments":
			out.Comments = int(in.Int())
		case "player":
			out.Player = string(in.String())
		case "platfrom":
			out.Platfrom = string(in.String())
		case "can_edit":
			out.CanEdit = int(in.Int())
		case "can_add":
			out.CanAdd = int(in.Int())
		case "is_private":
			out.IsPrivate = int(in.Int())
		case "processing":
			out.Processing = int(in.Int())
		case "live":
			out.Live = int(in.Int())
		case "upcoming":
			out.Upcoming = int(in.Int())
		case "repeat":
			out.Repeat = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi9(out *jwriter.Writer, in VideoNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OwnerId))
	}
	{
		const prefix string = ",\"access_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Duration))
	}
	{
		const prefix string = ",\"photo130\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Photo130))
	}
	{
		const prefix string = ",\"photo320\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Photo320))
	}
	{
		const prefix string = ",\"photo640\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Photo640))
	}
	{
		const prefix string = ",\"photo800\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Photo800))
	}
	{
		const prefix string = ",\"first_frame130\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstFrame130))
	}
	{
		const prefix string = ",\"first_frame160\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstFrame160))
	}
	{
		const prefix string = ",\"first_frame320\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstFrame320))
	}
	{
		const prefix string = ",\"first_frame800\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstFrame800))
	}
	{
		const prefix string = ",\"files\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Files).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"adding_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.AddingDate))
	}
	{
		const prefix string = ",\"views\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Views))
	}
	{
		const prefix string = ",\"comments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Comments))
	}
	{
		const prefix string = ",\"player\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Player))
	}
	{
		const prefix string = ",\"platfrom\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Platfrom))
	}
	{
		const prefix string = ",\"can_edit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CanEdit))
	}
	{
		const prefix string = ",\"can_add\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CanAdd))
	}
	{
		const prefix string = ",\"is_private\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.IsPrivate))
	}
	{
		const prefix string = ",\"processing\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Processing))
	}
	{
		const prefix string = ",\"live\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Live))
	}
	{
		const prefix string = ",\"upcoming\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Upcoming))
	}
	{
		const prefix string = ",\"repeat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Repeat))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VideoNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VideoNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VideoNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VideoNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi9(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi10(in *jlexer.Lexer, out *VideoFiles) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mp4_240":
			out.MP240 = string(in.String())
		case "mp4_360":
			out.MP360 = string(in.String())
		case "mp4_480":
			out.MP480 = string(in.String())
		case "mp4_720":
			out.MP720 = string(in.String())
		case "mp4_1080":
			out.MP1080 = string(in.String())
		case "external":
			out.External = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi10(out *jwriter.Writer, in VideoFiles) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mp4_240\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MP240))
	}
	{
		const prefix string = ",\"mp4_360\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MP360))
	}
	{
		const prefix string = ",\"mp4_480\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MP480))
	}
	{
		const prefix string = ",\"mp4_720\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MP720))
	}
	{
		const prefix string = ",\"mp4_1080\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MP1080))
	}
	{
		const prefix string = ",\"external\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.External))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VideoFiles) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VideoFiles) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VideoFiles) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VideoFiles) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi10(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi11(in *jlexer.Lexer, out *VideoCommentRestore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "video_id":
			out.VideoId = int(in.Int())
		case "video_owner_id":
			out.VideoOwnerId = int(in.Int())
		case "id":
			out.Id = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v31 Attachment
					(v31).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi11(out *jwriter.Writer, in VideoCommentRestore) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"video_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.VideoId))
	}
	{
		const prefix string = ",\"video_owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.VideoOwnerId))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Attachments {
				if v32 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v33)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VideoCommentRestore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VideoCommentRestore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VideoCommentRestore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VideoCommentRestore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi11(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi12(in *jlexer.Lexer, out *VideoCommentNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "video_id":
			out.VideoId = int(in.Int())
		case "video_owner_id":
			out.VideoOwnerId = int(in.Int())
		case "id":
			out.Id = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v34 Attachment
					(v34).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi12(out *jwriter.Writer, in VideoCommentNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"video_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.VideoId))
	}
	{
		const prefix string = ",\"video_owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.VideoOwnerId))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.Attachments {
				if v35 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v36)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VideoCommentNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VideoCommentNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VideoCommentNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VideoCommentNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi12(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi13(in *jlexer.Lexer, out *VideoCommentEdit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "video_id":
			out.VideoId = int(in.Int())
		case "video_owner_id":
			out.VideoOwnerId = int(in.Int())
		case "id":
			out.Id = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v37 Attachment
					(v37).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi13(out *jwriter.Writer, in VideoCommentEdit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"video_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.VideoId))
	}
	{
		const prefix string = ",\"video_owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.VideoOwnerId))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.Attachments {
				if v38 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v39)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VideoCommentEdit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VideoCommentEdit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VideoCommentEdit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VideoCommentEdit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi13(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi14(in *jlexer.Lexer, out *VideoCommentDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "owner_id":
			out.OwnerId = int(in.Int())
		case "id":
			out.Id = int(in.Int())
		case "user_id":
			out.UserId = int(in.Int())
		case "deleter_id":
			out.DeleterId = int(in.Int())
		case "video_id":
			out.VideoId = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi14(out *jwriter.Writer, in VideoCommentDelete) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OwnerId))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"deleter_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.DeleterId))
	}
	{
		const prefix string = ",\"video_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.VideoId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VideoCommentDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VideoCommentDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VideoCommentDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VideoCommentDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi14(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi15(in *jlexer.Lexer, out *Video) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "owner_id":
			out.OwnerId = int(in.Int())
		case "access_key":
			out.AccessKey = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "duration":
			out.Duration = int(in.Int())
		case "photo130":
			out.Photo130 = string(in.String())
		case "photo320":
			out.Photo320 = string(in.String())
		case "photo640":
			out.Photo640 = string(in.String())
		case "photo800":
			out.Photo800 = string(in.String())
		case "first_frame130":
			out.FirstFrame130 = string(in.String())
		case "first_frame160":
			out.FirstFrame160 = string(in.String())
		case "first_frame320":
			out.FirstFrame320 = string(in.String())
		case "first_frame800":
			out.FirstFrame800 = string(in.String())
		case "files":
			(out.Files).UnmarshalEasyJSON(in)
		case "date":
			out.Date = int(in.Int())
		case "adding_date":
			out.AddingDate = int(in.Int())
		case "views":
			out.Views = int(in.Int())
		case "comments":
			out.Comments = int(in.Int())
		case "player":
			out.Player = string(in.String())
		case "platfrom":
			out.Platfrom = string(in.String())
		case "can_edit":
			out.CanEdit = int(in.Int())
		case "can_add":
			out.CanAdd = int(in.Int())
		case "is_private":
			out.IsPrivate = int(in.Int())
		case "processing":
			out.Processing = int(in.Int())
		case "live":
			out.Live = int(in.Int())
		case "upcoming":
			out.Upcoming = int(in.Int())
		case "repeat":
			out.Repeat = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi15(out *jwriter.Writer, in Video) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OwnerId))
	}
	{
		const prefix string = ",\"access_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Duration))
	}
	{
		const prefix string = ",\"photo130\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Photo130))
	}
	{
		const prefix string = ",\"photo320\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Photo320))
	}
	{
		const prefix string = ",\"photo640\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Photo640))
	}
	{
		const prefix string = ",\"photo800\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Photo800))
	}
	{
		const prefix string = ",\"first_frame130\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstFrame130))
	}
	{
		const prefix string = ",\"first_frame160\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstFrame160))
	}
	{
		const prefix string = ",\"first_frame320\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstFrame320))
	}
	{
		const prefix string = ",\"first_frame800\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstFrame800))
	}
	{
		const prefix string = ",\"files\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Files).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"adding_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.AddingDate))
	}
	{
		const prefix string = ",\"views\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Views))
	}
	{
		const prefix string = ",\"comments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Comments))
	}
	{
		const prefix string = ",\"player\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Player))
	}
	{
		const prefix string = ",\"platfrom\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Platfrom))
	}
	{
		const prefix string = ",\"can_edit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CanEdit))
	}
	{
		const prefix string = ",\"can_add\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CanAdd))
	}
	{
		const prefix string = ",\"is_private\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.IsPrivate))
	}
	{
		const prefix string = ",\"processing\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Processing))
	}
	{
		const prefix string = ",\"live\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Live))
	}
	{
		const prefix string = ",\"upcoming\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Upcoming))
	}
	{
		const prefix string = ",\"repeat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Repeat))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Video) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Video) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Video) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Video) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi15(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi16(in *jlexer.Lexer, out *UserUnblock) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "admin_id":
			out.AdminId = int(in.Int())
		case "user_id":
			out.UserId = int(in.Int())
		case "by_end_date":
			out.ByEndDate = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi16(out *jwriter.Writer, in UserUnblock) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"admin_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.AdminId))
	}
	{
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"by_end_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ByEndDate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserUnblock) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserUnblock) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserUnblock) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserUnblock) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi16(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi17(in *jlexer.Lexer, out *UserBlock) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "admin_id":
			out.AdminId = int(in.Int())
		case "user_id":
			out.UserId = int(in.Int())
		case "unblock_date":
			out.UnblockDate = int(in.Int())
		case "reason":
			out.Reason = int(in.Int())
		case "comment":
			out.Comment = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi17(out *jwriter.Writer, in UserBlock) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"admin_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.AdminId))
	}
	{
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"unblock_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UnblockDate))
	}
	{
		const prefix string = ",\"reason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Reason))
	}
	{
		const prefix string = ",\"comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Comment))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserBlock) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserBlock) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserBlock) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserBlock) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi17(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi18(in *jlexer.Lexer, out *Sticker) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "product_id":
			out.ProductId = int(in.Int())
		case "sticker_id":
			out.StickerId = int(in.Int())
		case "images":
			if in.IsNull() {
				in.Skip()
				out.Images = nil
			} else {
				in.Delim('[')
				if out.Images == nil {
					if !in.IsDelim(']') {
						out.Images = make([]struct {
							Url    string
							Width  int
							Height int
						}, 0, 2)
					} else {
						out.Images = []struct {
							Url    string
							Width  int
							Height int
						}{}
					}
				} else {
					out.Images = (out.Images)[:0]
				}
				for !in.IsDelim(']') {
					var v40 struct {
						Url    string
						Width  int
						Height int
					}
					easyjsonC2d7175aDecode4(in, &v40)
					out.Images = append(out.Images, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "images_with_background":
			if in.IsNull() {
				in.Skip()
				out.ImagesWithBackground = nil
			} else {
				in.Delim('[')
				if out.ImagesWithBackground == nil {
					if !in.IsDelim(']') {
						out.ImagesWithBackground = make([]struct {
							Url    string
							Width  int
							Height int
						}, 0, 2)
					} else {
						out.ImagesWithBackground = []struct {
							Url    string
							Width  int
							Height int
						}{}
					}
				} else {
					out.ImagesWithBackground = (out.ImagesWithBackground)[:0]
				}
				for !in.IsDelim(']') {
					var v41 struct {
						Url    string
						Width  int
						Height int
					}
					easyjsonC2d7175aDecode4(in, &v41)
					out.ImagesWithBackground = append(out.ImagesWithBackground, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi18(out *jwriter.Writer, in Sticker) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"product_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ProductId))
	}
	{
		const prefix string = ",\"sticker_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.StickerId))
	}
	{
		const prefix string = ",\"images\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Images == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v42, v43 := range in.Images {
				if v42 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncode4(out, v43)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"images_with_background\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ImagesWithBackground == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.ImagesWithBackground {
				if v44 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncode4(out, v45)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Sticker) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Sticker) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Sticker) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Sticker) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi18(l, v)
}
func easyjsonC2d7175aDecode4(in *jlexer.Lexer, out *struct {
	Url    string
	Width  int
	Height int
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.Url = string(in.String())
		case "width":
			out.Width = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncode4(out *jwriter.Writer, in struct {
	Url    string
	Width  int
	Height int
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Height))
	}
	out.RawByte('}')
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi19(in *jlexer.Lexer, out *Post) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "owner_id":
			out.OwnerId = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "access_key":
			out.AccessKey = string(in.String())
		case "created_by":
			out.CreatedBy = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_owner_id":
			out.ReplyOwnerId = int(in.Int())
		case "reply_post_id":
			out.ReplyPostId = int(in.Int())
		case "friends_only":
			out.FriendsOnly = int(in.Int())
		case "comments":
			easyjsonC2d7175aDecode(in, &out.Comments)
		case "likes":
			easyjsonC2d7175aDecode1(in, &out.Likes)
		case "reposts":
			easyjsonC2d7175aDecode2(in, &out.Reposts)
		case "views":
			easyjsonC2d7175aDecode3(in, &out.Views)
		case "post_type":
			out.PostType = string(in.String())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v46 Attachment
					(v46).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "signer_id":
			out.SignerId = int(in.Int())
		case "copy_history":
			if in.IsNull() {
				in.Skip()
				out.CopyHistory = nil
			} else {
				in.Delim('[')
				if out.CopyHistory == nil {
					if !in.IsDelim(']') {
						out.CopyHistory = make([]Post, 0, 1)
					} else {
						out.CopyHistory = []Post{}
					}
				} else {
					out.CopyHistory = (out.CopyHistory)[:0]
				}
				for !in.IsDelim(']') {
					var v47 Post
					(v47).UnmarshalEasyJSON(in)
					out.CopyHistory = append(out.CopyHistory, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "can_pin":
			out.CanPin = int(in.Int())
		case "can_delete":
			out.CanDelete = int(in.Int())
		case "can_edit":
			out.CanEdit = int(in.Int())
		case "is_pinned":
			out.IsPinned = int(in.Int())
		case "marked_as_ads":
			out.MarkedAsAds = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi19(out *jwriter.Writer, in Post) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OwnerId))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"access_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"created_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CreatedBy))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyOwnerId))
	}
	{
		const prefix string = ",\"reply_post_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyPostId))
	}
	{
		const prefix string = ",\"friends_only\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FriendsOnly))
	}
	{
		const prefix string = ",\"comments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode(out, in.Comments)
	}
	{
		const prefix string = ",\"likes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode1(out, in.Likes)
	}
	{
		const prefix string = ",\"reposts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode2(out, in.Reposts)
	}
	{
		const prefix string = ",\"views\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode3(out, in.Views)
	}
	{
		const prefix string = ",\"post_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PostType))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v48, v49 := range in.Attachments {
				if v48 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v49)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"signer_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SignerId))
	}
	{
		const prefix string = ",\"copy_history\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.CopyHistory == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.CopyHistory {
				if v50 > 0 {
					out.RawByte(',')
				}
				(v51).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"can_pin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CanPin))
	}
	{
		const prefix string = ",\"can_delete\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CanDelete))
	}
	{
		const prefix string = ",\"can_edit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CanEdit))
	}
	{
		const prefix string = ",\"is_pinned\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.IsPinned))
	}
	{
		const prefix string = ",\"marked_as_ads\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MarkedAsAds))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Post) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Post) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Post) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Post) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi19(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi20(in *jlexer.Lexer, out *PollVoteNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "owner_id":
			out.OwnerId = int(in.Int())
		case "poll_id":
			out.PollId = int(in.Int())
		case "option_id":
			out.OptionId = int(in.Int())
		case "user_id":
			out.UserId = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi20(out *jwriter.Writer, in PollVoteNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OwnerId))
	}
	{
		const prefix string = ",\"poll_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PollId))
	}
	{
		const prefix string = ",\"option_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OptionId))
	}
	{
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UserId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PollVoteNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PollVoteNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PollVoteNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PollVoteNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi20(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi21(in *jlexer.Lexer, out *Poll) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "o_wner_id":
			out.OWnerId = int(in.Int())
		case "created":
			out.Created = int(in.Int())
		case "question":
			out.Question = string(in.String())
		case "votest":
			out.Votest = int(in.Int())
		case "answer_id":
			out.AnswerId = int(in.Int())
		case "asnwers":
			if in.IsNull() {
				in.Skip()
				out.Asnwers = nil
			} else {
				in.Delim('[')
				if out.Asnwers == nil {
					if !in.IsDelim(']') {
						out.Asnwers = make([]struct {
							Id    int
							Text  string
							Votes int
							Rate  float32
						}, 0, 1)
					} else {
						out.Asnwers = []struct {
							Id    int
							Text  string
							Votes int
							Rate  float32
						}{}
					}
				} else {
					out.Asnwers = (out.Asnwers)[:0]
				}
				for !in.IsDelim(']') {
					var v52 struct {
						Id    int
						Text  string
						Votes int
						Rate  float32
					}
					easyjsonC2d7175aDecode5(in, &v52)
					out.Asnwers = append(out.Asnwers, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "anonymous":
			out.Anonymous = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi21(out *jwriter.Writer, in Poll) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"o_wner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OWnerId))
	}
	{
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Created))
	}
	{
		const prefix string = ",\"question\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Question))
	}
	{
		const prefix string = ",\"votest\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Votest))
	}
	{
		const prefix string = ",\"answer_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.AnswerId))
	}
	{
		const prefix string = ",\"asnwers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Asnwers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.Asnwers {
				if v53 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncode5(out, v54)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"anonymous\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Anonymous))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Poll) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Poll) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Poll) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Poll) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi21(l, v)
}
func easyjsonC2d7175aDecode5(in *jlexer.Lexer, out *struct {
	Id    int
	Text  string
	Votes int
	Rate  float32
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "votes":
			out.Votes = int(in.Int())
		case "rate":
			out.Rate = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncode5(out *jwriter.Writer, in struct {
	Id    int
	Text  string
	Votes int
	Rate  float32
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"votes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Votes))
	}
	{
		const prefix string = ",\"rate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Rate))
	}
	out.RawByte('}')
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi22(in *jlexer.Lexer, out *PhotoSize) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "url":
			out.Url = string(in.String())
		case "width":
			out.Width = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi22(out *jwriter.Writer, in PhotoSize) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Height))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhotoSize) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotoSize) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotoSize) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotoSize) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi22(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi23(in *jlexer.Lexer, out *PhotoNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "album_id":
			out.AlbumId = int(in.Int())
		case "owner_id":
			out.OwnerId = int(in.Int())
		case "user_id":
			out.UserId = int(in.Int())
		case "access_key":
			out.AccessKey = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "date":
			out.Date = int(in.Int())
		case "sizes":
			if in.IsNull() {
				in.Skip()
				out.Sizes = nil
			} else {
				in.Delim('[')
				if out.Sizes == nil {
					if !in.IsDelim(']') {
						out.Sizes = make([]PhotoSize, 0, 1)
					} else {
						out.Sizes = []PhotoSize{}
					}
				} else {
					out.Sizes = (out.Sizes)[:0]
				}
				for !in.IsDelim(']') {
					var v55 PhotoSize
					(v55).UnmarshalEasyJSON(in)
					out.Sizes = append(out.Sizes, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "width":
			out.Width = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi23(out *jwriter.Writer, in PhotoNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"album_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.AlbumId))
	}
	{
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OwnerId))
	}
	{
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"access_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"sizes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Sizes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v56, v57 := range in.Sizes {
				if v56 > 0 {
					out.RawByte(',')
				}
				(v57).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Height))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhotoNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotoNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotoNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotoNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi23(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi24(in *jlexer.Lexer, out *PhotoCommentRestore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "photo_id":
			out.PhotoId = int(in.Int())
		case "photo_owner_id":
			out.PhotoOwnerId = int(in.Int())
		case "id":
			out.Id = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v58 Attachment
					(v58).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi24(out *jwriter.Writer, in PhotoCommentRestore) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"photo_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PhotoId))
	}
	{
		const prefix string = ",\"photo_owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PhotoOwnerId))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v59, v60 := range in.Attachments {
				if v59 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v60)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhotoCommentRestore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotoCommentRestore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotoCommentRestore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotoCommentRestore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi24(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi25(in *jlexer.Lexer, out *PhotoCommentNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "photo_id":
			out.PhotoId = int(in.Int())
		case "photo_owner_id":
			out.PhotoOwnerId = int(in.Int())
		case "id":
			out.Id = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v61 Attachment
					(v61).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi25(out *jwriter.Writer, in PhotoCommentNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"photo_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PhotoId))
	}
	{
		const prefix string = ",\"photo_owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PhotoOwnerId))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v62, v63 := range in.Attachments {
				if v62 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v63)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhotoCommentNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotoCommentNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotoCommentNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotoCommentNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi25(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi26(in *jlexer.Lexer, out *PhotoCommentEdit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "photo_id":
			out.PhotoId = int(in.Int())
		case "photo_owner_id":
			out.PhotoOwnerId = int(in.Int())
		case "id":
			out.Id = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v64 Attachment
					(v64).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi26(out *jwriter.Writer, in PhotoCommentEdit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"photo_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PhotoId))
	}
	{
		const prefix string = ",\"photo_owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PhotoOwnerId))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v65, v66 := range in.Attachments {
				if v65 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v66)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhotoCommentEdit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotoCommentEdit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotoCommentEdit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotoCommentEdit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi26(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi27(in *jlexer.Lexer, out *PhotoCommentDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "owner_id":
			out.OwnerId = int(in.Int())
		case "id":
			out.Id = int(in.Int())
		case "user_id":
			out.UserId = int(in.Int())
		case "deleter_id":
			out.DeleterId = int(in.Int())
		case "photo_id":
			out.PhotoId = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi27(out *jwriter.Writer, in PhotoCommentDelete) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OwnerId))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"deleter_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.DeleterId))
	}
	{
		const prefix string = ",\"photo_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PhotoId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhotoCommentDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotoCommentDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotoCommentDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotoCommentDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi27(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi28(in *jlexer.Lexer, out *Photo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "album_id":
			out.AlbumId = int(in.Int())
		case "owner_id":
			out.OwnerId = int(in.Int())
		case "user_id":
			out.UserId = int(in.Int())
		case "access_key":
			out.AccessKey = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "date":
			out.Date = int(in.Int())
		case "sizes":
			if in.IsNull() {
				in.Skip()
				out.Sizes = nil
			} else {
				in.Delim('[')
				if out.Sizes == nil {
					if !in.IsDelim(']') {
						out.Sizes = make([]PhotoSize, 0, 1)
					} else {
						out.Sizes = []PhotoSize{}
					}
				} else {
					out.Sizes = (out.Sizes)[:0]
				}
				for !in.IsDelim(']') {
					var v67 PhotoSize
					(v67).UnmarshalEasyJSON(in)
					out.Sizes = append(out.Sizes, v67)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "width":
			out.Width = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi28(out *jwriter.Writer, in Photo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"album_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.AlbumId))
	}
	{
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OwnerId))
	}
	{
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"access_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"sizes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Sizes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v68, v69 := range in.Sizes {
				if v68 > 0 {
					out.RawByte(',')
				}
				(v69).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Height))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Photo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Photo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Photo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Photo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi28(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi29(in *jlexer.Lexer, out *Page) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "group_id":
			out.GroupId = int(in.Int())
		case "creator_id":
			out.CreatorId = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "current_user_can_edit":
			out.CurrentUserCanEdit = int(in.Int())
		case "current_user_can_edit_access":
			out.CurrentUserCanEditAccess = int(in.Int())
		case "who_can_view":
			out.WhoCanView = int(in.Int())
		case "who_can_edit":
			out.WhoCanEdit = int(in.Int())
		case "edited":
			out.Edited = int(in.Int())
		case "created":
			out.Created = int(in.Int())
		case "editor_id":
			out.EditorId = int(in.Int())
		case "views":
			out.Views = int(in.Int())
		case "parent":
			out.Parent = string(in.String())
		case "parent2":
			out.Parent2 = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "html":
			out.Html = string(in.String())
		case "view_url":
			out.ViewUrl = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi29(out *jwriter.Writer, in Page) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"group_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.GroupId))
	}
	{
		const prefix string = ",\"creator_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CreatorId))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"current_user_can_edit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CurrentUserCanEdit))
	}
	{
		const prefix string = ",\"current_user_can_edit_access\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CurrentUserCanEditAccess))
	}
	{
		const prefix string = ",\"who_can_view\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.WhoCanView))
	}
	{
		const prefix string = ",\"who_can_edit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.WhoCanEdit))
	}
	{
		const prefix string = ",\"edited\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Edited))
	}
	{
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Created))
	}
	{
		const prefix string = ",\"editor_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.EditorId))
	}
	{
		const prefix string = ",\"views\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Views))
	}
	{
		const prefix string = ",\"parent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Parent))
	}
	{
		const prefix string = ",\"parent2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Parent2))
	}
	{
		const prefix string = ",\"source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"html\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Html))
	}
	{
		const prefix string = ",\"view_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ViewUrl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Page) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Page) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Page) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Page) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi29(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi30(in *jlexer.Lexer, out *Note) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "owner_id":
			out.OwnerId = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "date":
			out.Date = int(in.Int())
		case "comments":
			out.Comments = int(in.Int())
		case "read_comments":
			out.ReadComments = int(in.Int())
		case "view_url":
			out.ViewUrl = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi30(out *jwriter.Writer, in Note) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OwnerId))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"comments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Comments))
	}
	{
		const prefix string = ",\"read_comments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReadComments))
	}
	{
		const prefix string = ",\"view_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ViewUrl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Note) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Note) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Note) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Note) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi30(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi31(in *jlexer.Lexer, out *MessageReply) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "peer_id":
			out.PeerId = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "random_id":
			out.RandomId = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v70 Attachment
					(v70).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v70)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "important":
			out.Important = bool(in.Bool())
		case "payload":
			out.Payload = string(in.String())
		case "fwd_messages":
			if in.IsNull() {
				in.Skip()
				out.FwdMessages = nil
			} else {
				in.Delim('[')
				if out.FwdMessages == nil {
					if !in.IsDelim(']') {
						out.FwdMessages = make([]Message, 0, 1)
					} else {
						out.FwdMessages = []Message{}
					}
				} else {
					out.FwdMessages = (out.FwdMessages)[:0]
				}
				for !in.IsDelim(']') {
					var v71 Message
					(v71).UnmarshalEasyJSON(in)
					out.FwdMessages = append(out.FwdMessages, v71)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "action":
			easyjsonC2d7175aDecode6(in, &out.Action)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi31(out *jwriter.Writer, in MessageReply) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"peer_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PeerId))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"random_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.RandomId))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v72, v73 := range in.Attachments {
				if v72 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v73)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"important\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Important))
	}
	{
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Payload))
	}
	{
		const prefix string = ",\"fwd_messages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.FwdMessages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v74, v75 := range in.FwdMessages {
				if v74 > 0 {
					out.RawByte(',')
				}
				(v75).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode6(out, in.Action)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageReply) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageReply) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageReply) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageReply) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi31(l, v)
}
func easyjsonC2d7175aDecode6(in *jlexer.Lexer, out *struct {
	Type     string
	MemberId int
	Text     string
	Email    string
	Photo    struct {
		Photo50  string
		Photo100 string
		Photo200 string
	}
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "member_id":
			out.MemberId = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "photo":
			easyjsonC2d7175aDecode7(in, &out.Photo)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncode6(out *jwriter.Writer, in struct {
	Type     string
	MemberId int
	Text     string
	Email    string
	Photo    struct {
		Photo50  string
		Photo100 string
		Photo200 string
	}
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"member_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MemberId))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"photo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode7(out, in.Photo)
	}
	out.RawByte('}')
}
func easyjsonC2d7175aDecode7(in *jlexer.Lexer, out *struct {
	Photo50  string
	Photo100 string
	Photo200 string
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "photo50":
			out.Photo50 = string(in.String())
		case "photo100":
			out.Photo100 = string(in.String())
		case "photo200":
			out.Photo200 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncode7(out *jwriter.Writer, in struct {
	Photo50  string
	Photo100 string
	Photo200 string
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"photo50\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Photo50))
	}
	{
		const prefix string = ",\"photo100\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Photo100))
	}
	{
		const prefix string = ",\"photo200\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Photo200))
	}
	out.RawByte('}')
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi32(in *jlexer.Lexer, out *MessageNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "peer_id":
			out.PeerId = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "random_id":
			out.RandomId = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v76 Attachment
					(v76).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v76)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "important":
			out.Important = bool(in.Bool())
		case "payload":
			out.Payload = string(in.String())
		case "fwd_messages":
			if in.IsNull() {
				in.Skip()
				out.FwdMessages = nil
			} else {
				in.Delim('[')
				if out.FwdMessages == nil {
					if !in.IsDelim(']') {
						out.FwdMessages = make([]Message, 0, 1)
					} else {
						out.FwdMessages = []Message{}
					}
				} else {
					out.FwdMessages = (out.FwdMessages)[:0]
				}
				for !in.IsDelim(']') {
					var v77 Message
					(v77).UnmarshalEasyJSON(in)
					out.FwdMessages = append(out.FwdMessages, v77)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "action":
			easyjsonC2d7175aDecode6(in, &out.Action)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi32(out *jwriter.Writer, in MessageNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"peer_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PeerId))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"random_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.RandomId))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v78, v79 := range in.Attachments {
				if v78 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v79)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"important\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Important))
	}
	{
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Payload))
	}
	{
		const prefix string = ",\"fwd_messages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.FwdMessages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v80, v81 := range in.FwdMessages {
				if v80 > 0 {
					out.RawByte(',')
				}
				(v81).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode6(out, in.Action)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi32(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi33(in *jlexer.Lexer, out *MessageEdit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "peer_id":
			out.PeerId = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "random_id":
			out.RandomId = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v82 Attachment
					(v82).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v82)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "important":
			out.Important = bool(in.Bool())
		case "payload":
			out.Payload = string(in.String())
		case "fwd_messages":
			if in.IsNull() {
				in.Skip()
				out.FwdMessages = nil
			} else {
				in.Delim('[')
				if out.FwdMessages == nil {
					if !in.IsDelim(']') {
						out.FwdMessages = make([]Message, 0, 1)
					} else {
						out.FwdMessages = []Message{}
					}
				} else {
					out.FwdMessages = (out.FwdMessages)[:0]
				}
				for !in.IsDelim(']') {
					var v83 Message
					(v83).UnmarshalEasyJSON(in)
					out.FwdMessages = append(out.FwdMessages, v83)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "action":
			easyjsonC2d7175aDecode6(in, &out.Action)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi33(out *jwriter.Writer, in MessageEdit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"peer_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PeerId))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"random_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.RandomId))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v84, v85 := range in.Attachments {
				if v84 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v85)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"important\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Important))
	}
	{
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Payload))
	}
	{
		const prefix string = ",\"fwd_messages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.FwdMessages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v86, v87 := range in.FwdMessages {
				if v86 > 0 {
					out.RawByte(',')
				}
				(v87).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode6(out, in.Action)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageEdit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageEdit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageEdit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageEdit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi33(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi34(in *jlexer.Lexer, out *MessageDeny) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserId = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi34(out *jwriter.Writer, in MessageDeny) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UserId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageDeny) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageDeny) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageDeny) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageDeny) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi34(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi35(in *jlexer.Lexer, out *MessageAllow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserId = int(in.Int())
		case "key":
			out.Key = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi35(out *jwriter.Writer, in MessageAllow) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Key))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageAllow) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageAllow) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageAllow) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageAllow) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi35(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi36(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "peer_id":
			out.PeerId = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "random_id":
			out.RandomId = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v88 Attachment
					(v88).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v88)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "important":
			out.Important = bool(in.Bool())
		case "payload":
			out.Payload = string(in.String())
		case "fwd_messages":
			if in.IsNull() {
				in.Skip()
				out.FwdMessages = nil
			} else {
				in.Delim('[')
				if out.FwdMessages == nil {
					if !in.IsDelim(']') {
						out.FwdMessages = make([]Message, 0, 1)
					} else {
						out.FwdMessages = []Message{}
					}
				} else {
					out.FwdMessages = (out.FwdMessages)[:0]
				}
				for !in.IsDelim(']') {
					var v89 Message
					(v89).UnmarshalEasyJSON(in)
					out.FwdMessages = append(out.FwdMessages, v89)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "action":
			easyjsonC2d7175aDecode6(in, &out.Action)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi36(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"peer_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PeerId))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"random_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.RandomId))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v90, v91 := range in.Attachments {
				if v90 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v91)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"important\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Important))
	}
	{
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Payload))
	}
	{
		const prefix string = ",\"fwd_messages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.FwdMessages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v92, v93 := range in.FwdMessages {
				if v92 > 0 {
					out.RawByte(',')
				}
				(v93).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode6(out, in.Action)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi36(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi37(in *jlexer.Lexer, out *MarketCommentRestore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "market_owner_id":
			out.MarketOwnerId = int(in.Int())
		case "item_id":
			out.ItemId = int(in.Int())
		case "id":
			out.Id = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v94 Attachment
					(v94).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v94)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi37(out *jwriter.Writer, in MarketCommentRestore) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"market_owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MarketOwnerId))
	}
	{
		const prefix string = ",\"item_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ItemId))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v95, v96 := range in.Attachments {
				if v95 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v96)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketCommentRestore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketCommentRestore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketCommentRestore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketCommentRestore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi37(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi38(in *jlexer.Lexer, out *MarketCommentNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "market_owner_id":
			out.MarketOwnerId = int(in.Int())
		case "item_id":
			out.ItemId = int(in.Int())
		case "id":
			out.Id = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v97 Attachment
					(v97).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v97)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi38(out *jwriter.Writer, in MarketCommentNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"market_owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MarketOwnerId))
	}
	{
		const prefix string = ",\"item_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ItemId))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v98, v99 := range in.Attachments {
				if v98 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v99)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketCommentNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketCommentNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketCommentNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketCommentNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi38(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi39(in *jlexer.Lexer, out *MarketCommentEdit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "market_owner_id":
			out.MarketOwnerId = int(in.Int())
		case "item_id":
			out.ItemId = int(in.Int())
		case "id":
			out.Id = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v100 Attachment
					(v100).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v100)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi39(out *jwriter.Writer, in MarketCommentEdit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"market_owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MarketOwnerId))
	}
	{
		const prefix string = ",\"item_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ItemId))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v101, v102 := range in.Attachments {
				if v101 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v102)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketCommentEdit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketCommentEdit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketCommentEdit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketCommentEdit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi39(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi40(in *jlexer.Lexer, out *MarketCommentDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "owner_id":
			out.OwnerId = int(in.Int())
		case "id":
			out.Id = int(in.Int())
		case "user_id":
			out.UserId = int(in.Int())
		case "deleter_id":
			out.DeleterId = int(in.Int())
		case "item_id":
			out.ItemId = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi40(out *jwriter.Writer, in MarketCommentDelete) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OwnerId))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"deleter_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.DeleterId))
	}
	{
		const prefix string = ",\"item_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ItemId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketCommentDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketCommentDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketCommentDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketCommentDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi40(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi41(in *jlexer.Lexer, out *MarketAlbum) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "owner_id":
			out.OwnerId = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "photo":
			(out.Photo).UnmarshalEasyJSON(in)
		case "count":
			out.Count = int(in.Int())
		case "updated_time":
			out.UpdatedTime = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi41(out *jwriter.Writer, in MarketAlbum) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OwnerId))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"photo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Photo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"updated_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UpdatedTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketAlbum) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketAlbum) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketAlbum) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketAlbum) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi41(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi42(in *jlexer.Lexer, out *Market) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "owner_id":
			out.OwnerId = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "price":
			easyjsonC2d7175aDecode8(in, &out.Price)
		case "category":
			easyjsonC2d7175aDecode9(in, &out.Category)
		case "thumb_photo":
			out.ThumbPhoto = string(in.String())
		case "date":
			out.Date = int(in.Int())
		case "availability":
			out.Availability = int(in.Int())
		case "photos":
			if in.IsNull() {
				in.Skip()
				out.Photos = nil
			} else {
				in.Delim('[')
				if out.Photos == nil {
					if !in.IsDelim(']') {
						out.Photos = make([]Photo, 0, 1)
					} else {
						out.Photos = []Photo{}
					}
				} else {
					out.Photos = (out.Photos)[:0]
				}
				for !in.IsDelim(']') {
					var v103 Photo
					(v103).UnmarshalEasyJSON(in)
					out.Photos = append(out.Photos, v103)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "can_comment":
			out.CanComment = int(in.Int())
		case "can_repost":
			out.CanRepost = int(in.Int())
		case "likes":
			easyjsonC2d7175aDecode10(in, &out.Likes)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi42(out *jwriter.Writer, in Market) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OwnerId))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode8(out, in.Price)
	}
	{
		const prefix string = ",\"category\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode9(out, in.Category)
	}
	{
		const prefix string = ",\"thumb_photo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ThumbPhoto))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"availability\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Availability))
	}
	{
		const prefix string = ",\"photos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Photos == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v104, v105 := range in.Photos {
				if v104 > 0 {
					out.RawByte(',')
				}
				(v105).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"can_comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CanComment))
	}
	{
		const prefix string = ",\"can_repost\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CanRepost))
	}
	{
		const prefix string = ",\"likes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode10(out, in.Likes)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Market) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Market) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Market) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Market) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi42(l, v)
}
func easyjsonC2d7175aDecode10(in *jlexer.Lexer, out *struct {
	UserLikes int
	Count     int
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_likes":
			out.UserLikes = int(in.Int())
		case "count":
			out.Count = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncode10(out *jwriter.Writer, in struct {
	UserLikes int
	Count     int
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_likes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UserLikes))
	}
	{
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Count))
	}
	out.RawByte('}')
}
func easyjsonC2d7175aDecode9(in *jlexer.Lexer, out *struct {
	Id      int
	Name    string
	Section struct {
		Id   int
		Name string
	}
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "section":
			easyjsonC2d7175aDecode11(in, &out.Section)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncode9(out *jwriter.Writer, in struct {
	Id      int
	Name    string
	Section struct {
		Id   int
		Name string
	}
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"section\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode11(out, in.Section)
	}
	out.RawByte('}')
}
func easyjsonC2d7175aDecode11(in *jlexer.Lexer, out *struct {
	Id   int
	Name string
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncode11(out *jwriter.Writer, in struct {
	Id   int
	Name string
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjsonC2d7175aDecode8(in *jlexer.Lexer, out *struct {
	Amount   int
	Currency struct {
		Id   int
		Name string
	}
	Text string
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			out.Amount = int(in.Int())
		case "currency":
			easyjsonC2d7175aDecode11(in, &out.Currency)
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncode8(out *jwriter.Writer, in struct {
	Amount   int
	Currency struct {
		Id   int
		Name string
	}
	Text string
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Amount))
	}
	{
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode11(out, in.Currency)
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	out.RawByte('}')
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi43(in *jlexer.Lexer, out *Link) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.Url = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "caption":
			out.Caption = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "photo":
			(out.Photo).UnmarshalEasyJSON(in)
		case "preview_page":
			out.PreviewPage = string(in.String())
		case "preview_url":
			out.PreviewUrl = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi43(out *jwriter.Writer, in Link) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"caption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Caption))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"photo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Photo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"preview_page\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PreviewPage))
	}
	{
		const prefix string = ",\"preview_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PreviewUrl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Link) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Link) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Link) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Link) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi43(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi44(in *jlexer.Lexer, out *GroupOfficersEdit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "admin_id":
			out.AdminId = int(in.Int())
		case "user_id":
			out.UserId = int(in.Int())
		case "level_old":
			out.LevelOld = int(in.Int())
		case "level_new":
			out.LevelNew = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi44(out *jwriter.Writer, in GroupOfficersEdit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"admin_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.AdminId))
	}
	{
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"level_old\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LevelOld))
	}
	{
		const prefix string = ",\"level_new\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LevelNew))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GroupOfficersEdit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GroupOfficersEdit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GroupOfficersEdit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GroupOfficersEdit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi44(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi45(in *jlexer.Lexer, out *GroupLeave) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserId = int(in.Int())
		case "self":
			out.Self = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi45(out *jwriter.Writer, in GroupLeave) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"self\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Self))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GroupLeave) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GroupLeave) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GroupLeave) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GroupLeave) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi45(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi46(in *jlexer.Lexer, out *GroupJoin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserId = int(in.Int())
		case "join_type":
			out.JoinType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi46(out *jwriter.Writer, in GroupJoin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"join_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JoinType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GroupJoin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GroupJoin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GroupJoin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GroupJoin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi46(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi47(in *jlexer.Lexer, out *GroupChangeSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserId = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi47(out *jwriter.Writer, in GroupChangeSettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UserId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GroupChangeSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GroupChangeSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GroupChangeSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GroupChangeSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi47(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi48(in *jlexer.Lexer, out *GroupChangePhoto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserId = int(in.Int())
		case "photo":
			(out.Photo).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi48(out *jwriter.Writer, in GroupChangePhoto) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"photo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Photo).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GroupChangePhoto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GroupChangePhoto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GroupChangePhoto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GroupChangePhoto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi48(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi49(in *jlexer.Lexer, out *Gift) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "thumb256":
			out.Thumb256 = string(in.String())
		case "thumb96":
			out.Thumb96 = string(in.String())
		case "thumb48":
			out.Thumb48 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi49(out *jwriter.Writer, in Gift) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"thumb256\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Thumb256))
	}
	{
		const prefix string = ",\"thumb96\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Thumb96))
	}
	{
		const prefix string = ",\"thumb48\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Thumb48))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Gift) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi49(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Gift) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi49(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Gift) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi49(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Gift) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi49(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi50(in *jlexer.Lexer, out *Document) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "owner_id":
			out.OwnerId = int(in.Int())
		case "access_key":
			out.AccessKey = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "size":
			out.Size = int(in.Int())
		case "ext":
			out.Ext = string(in.String())
		case "url":
			out.Url = string(in.String())
		case "date":
			out.Date = int(in.Int())
		case "type":
			out.Type = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi50(out *jwriter.Writer, in Document) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OwnerId))
	}
	{
		const prefix string = ",\"access_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Size))
	}
	{
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ext))
	}
	{
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Document) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi50(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Document) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi50(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Document) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi50(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Document) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi50(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi51(in *jlexer.Lexer, out *Confirmation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi51(out *jwriter.Writer, in Confirmation) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Confirmation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi51(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Confirmation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi51(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Confirmation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi51(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Confirmation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi51(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi52(in *jlexer.Lexer, out *CommentBoard) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v106 Attachment
					(v106).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v106)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "likes":
			easyjsonC2d7175aDecode12(in, &out.Likes)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi52(out *jwriter.Writer, in CommentBoard) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v107, v108 := range in.Attachments {
				if v107 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v108)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"likes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode12(out, in.Likes)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentBoard) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi52(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentBoard) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi52(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentBoard) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi52(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentBoard) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi52(l, v)
}
func easyjsonC2d7175aDecode12(in *jlexer.Lexer, out *struct {
	Count     int
	UserLikes int
	CanLike   int
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "user_likes":
			out.UserLikes = int(in.Int())
		case "can_like":
			out.CanLike = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncode12(out *jwriter.Writer, in struct {
	Count     int
	UserLikes int
	CanLike   int
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"user_likes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UserLikes))
	}
	{
		const prefix string = ",\"can_like\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CanLike))
	}
	out.RawByte('}')
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi53(in *jlexer.Lexer, out *Comment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v109 Attachment
					(v109).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v109)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi53(out *jwriter.Writer, in Comment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v110, v111 := range in.Attachments {
				if v110 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v111)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Comment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi53(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Comment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi53(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Comment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi53(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Comment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi53(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi54(in *jlexer.Lexer, out *BoardPostRestore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "topic_id":
			out.TopicId = int(in.Int())
		case "topic_owner_id":
			out.TopicOwnerId = int(in.Int())
		case "id":
			out.Id = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v112 Attachment
					(v112).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v112)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "likes":
			easyjsonC2d7175aDecode12(in, &out.Likes)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi54(out *jwriter.Writer, in BoardPostRestore) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"topic_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TopicId))
	}
	{
		const prefix string = ",\"topic_owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TopicOwnerId))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v113, v114 := range in.Attachments {
				if v113 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v114)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"likes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode12(out, in.Likes)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BoardPostRestore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi54(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BoardPostRestore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi54(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BoardPostRestore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi54(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BoardPostRestore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi54(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi55(in *jlexer.Lexer, out *BoardPostNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "topic_id":
			out.TopicId = int(in.Int())
		case "topic_owner_id":
			out.TopicOwnerId = int(in.Int())
		case "id":
			out.Id = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v115 Attachment
					(v115).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v115)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "likes":
			easyjsonC2d7175aDecode12(in, &out.Likes)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi55(out *jwriter.Writer, in BoardPostNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"topic_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TopicId))
	}
	{
		const prefix string = ",\"topic_owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TopicOwnerId))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v116, v117 := range in.Attachments {
				if v116 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v117)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"likes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode12(out, in.Likes)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BoardPostNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi55(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BoardPostNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi55(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BoardPostNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi55(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BoardPostNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi55(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi56(in *jlexer.Lexer, out *BoardPostEdit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "topic_id":
			out.TopicId = int(in.Int())
		case "topic_owner_id":
			out.TopicOwnerId = int(in.Int())
		case "id":
			out.Id = int(in.Int())
		case "from_id":
			out.FromId = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v118 Attachment
					(v118).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v118)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "likes":
			easyjsonC2d7175aDecode12(in, &out.Likes)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi56(out *jwriter.Writer, in BoardPostEdit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"topic_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TopicId))
	}
	{
		const prefix string = ",\"topic_owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TopicOwnerId))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromId))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v119, v120 := range in.Attachments {
				if v119 > 0 {
					out.RawByte(',')
				}
				easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi1(out, v120)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"likes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC2d7175aEncode12(out, in.Likes)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BoardPostEdit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi56(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BoardPostEdit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi56(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BoardPostEdit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi56(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BoardPostEdit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi56(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi57(in *jlexer.Lexer, out *BoardPostDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "topic_owner_id":
			out.TopicOwnerId = int(in.Int())
		case "topic_id":
			out.TopicId = int(in.Int())
		case "id":
			out.Id = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi57(out *jwriter.Writer, in BoardPostDelete) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"topic_owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TopicOwnerId))
	}
	{
		const prefix string = ",\"topic_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TopicId))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BoardPostDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi57(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BoardPostDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi57(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BoardPostDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi57(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BoardPostDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi57(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi58(in *jlexer.Lexer, out *AudioNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "owner_id":
			out.OwnerId = int(in.Int())
		case "access_key":
			out.AccessKey = string(in.String())
		case "artist":
			out.Artist = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "duration":
			out.Duration = int(in.Int())
		case "url":
			out.Url = string(in.String())
		case "lyrics_id":
			out.LyricsId = int(in.Int())
		case "album_id":
			out.AlbumId = int(in.Int())
		case "genre_id":
			out.GenreId = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "no_search":
			out.NoSearch = int(in.Int())
		case "is_hq":
			out.IsHq = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi58(out *jwriter.Writer, in AudioNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OwnerId))
	}
	{
		const prefix string = ",\"access_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"artist\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Artist))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Duration))
	}
	{
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"lyrics_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LyricsId))
	}
	{
		const prefix string = ",\"album_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.AlbumId))
	}
	{
		const prefix string = ",\"genre_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.GenreId))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"no_search\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NoSearch))
	}
	{
		const prefix string = ",\"is_hq\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.IsHq))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AudioNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi58(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AudioNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi58(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AudioNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi58(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AudioNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi58(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi59(in *jlexer.Lexer, out *Audio) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "owner_id":
			out.OwnerId = int(in.Int())
		case "access_key":
			out.AccessKey = string(in.String())
		case "artist":
			out.Artist = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "duration":
			out.Duration = int(in.Int())
		case "url":
			out.Url = string(in.String())
		case "lyrics_id":
			out.LyricsId = int(in.Int())
		case "album_id":
			out.AlbumId = int(in.Int())
		case "genre_id":
			out.GenreId = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "no_search":
			out.NoSearch = int(in.Int())
		case "is_hq":
			out.IsHq = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi59(out *jwriter.Writer, in Audio) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OwnerId))
	}
	{
		const prefix string = ",\"access_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"artist\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Artist))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Duration))
	}
	{
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"lyrics_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LyricsId))
	}
	{
		const prefix string = ",\"album_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.AlbumId))
	}
	{
		const prefix string = ",\"genre_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.GenreId))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"no_search\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NoSearch))
	}
	{
		const prefix string = ",\"is_hq\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.IsHq))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Audio) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi59(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Audio) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi59(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Audio) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi59(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Audio) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi59(l, v)
}
func easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi60(in *jlexer.Lexer, out *Album) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "thumb":
			(out.Thumb).UnmarshalEasyJSON(in)
		case "owner_id":
			out.OwnerId = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "created":
			out.Created = int(in.Int())
		case "updated":
			out.Updated = int(in.Int())
		case "size":
			out.Size = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi60(out *jwriter.Writer, in Album) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"thumb\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Thumb).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OwnerId))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Created))
	}
	{
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Updated))
	}
	{
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Size))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Album) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi60(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Album) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC2d7175aEncodeGithubComStek29VkCallbackApi60(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Album) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi60(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Album) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC2d7175aDecodeGithubComStek29VkCallbackApi60(l, v)
}
